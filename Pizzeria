import flet as ft
import json
import food_data
import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
import io
import base64



class SaveAcc:
    def __init__(self):
        self.dataclass = self.load_data()

    def load_data(self):
        try:
            with open('database.json', 'r') as file:
                dataclass = json.load(file)
        except (FileNotFoundError, json.decoder.JSONDecodeError):
            dataclass = {}
        return dataclass

    def save_data(self):
        with open('database.json', 'w') as file:
            json.dump(self.dataclass, file)

class SavePrice:
    def __init__(self):
        self.dataprice = self.load_data()

    def load_data(self):
        try:
            with open('pricebase.json', 'r') as file:
                dataprice = json.load(file)
        except (FileNotFoundError, json.decoder.JSONDecodeError):
            dataprice = {}
        return dataprice

    def save_data(self):
        with open('pricebase.json', 'w') as file:
            json.dump(self.dataprice, file)

class Save:
    def __init__(self):
        self.food_data = self.load_data()

    def load_data(self):
        try:
            with open('imagebase.json', 'r') as file:
                datafood = json.load(file)
        except (FileNotFoundError, json.decoder.JSONDecodeError):
            datafood = {}
        return datafood

    def save_data(self):
        for data in self.food_data:
            if isinstance(data, ft.Image):
                self.food_data[data] = data.src
        with open('imagebase.json', 'w') as file:
            json.dump(self.food_data, file)

class SaveText:
    def __init__(self):
        self.textdata = self.load_data()

    def load_data(self):
        try:
            with open('foodbase.json', 'r') as file:
                textclass = json.load(file)
        except (FileNotFoundError, json.decoder.JSONDecodeError):
            textclass = {}
        return textclass

    def save_data(self):
        with open('foodbase.json', 'w+') as file:
            json.dump(self.textdata, file)

class DictSave:
    def __init__(self):
        self.dictdata = self.load_data()

    def load_data(self):
        try:
            with open('dict_base.json', 'r') as file:
                dictclass = json.load(file)
        except (FileNotFoundError, json.decoder.JSONDecodeError):
            dictclass = [list(food_data.dicts)]
        return dictclass

    def save_data(self):
        with open('dict_base.json', 'w+') as file:
            json.dump(self.dictdata, file)



food_box = []
def main(page: ft.Page):
    save_img = Save()
    save_text = SaveText()
    save_acc = SaveAcc()
    save_price = SavePrice()
    save_dict = DictSave()
    sign_status = False



    page.scroll = "auto"

    page.vertical_alignment = ft.MainAxisAlignment.CENTER
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER

    nick_name = ft.TextField(label="Nickname", autofocus=True, width=200)
    password = ft.TextField(label="Password", password=True, can_reveal_password=True, width=200)
    greetings = ft.Column()
    nick_info = ft.TextField(label="Your nickname", read_only=True, visible=True, width=200)
    password_info = ft.TextField(label="Your password", read_only=True, password=True, can_reveal_password=True, visible=True, width=200)

    # must_cube = ft.Container(
    #     content=ft.Image(src=food_data.must_img), width=250, height=250, bgcolor="transparent", border_radius=10, offset=(-3, 0), animate_opacity=ft.animation.Animation(300),
    # )
    # phil_cube = ft.Container(
    #     content=ft.Image(src=food_data.phil_img), width=250, height=250, bgcolor="transparent", border_radius=10,offset=(-1, 0),
    #     animate_opacity=ft.animation.Animation(300),
    # )
    # cali_cube = ft.Container(
    #     content=ft.Image(src=food_data.cali_img), width=250, height=250, bgcolor="transparent", border_radius=10,offset=(1, 0),
    #     animate_opacity=ft.animation.Animation(300),
    # )
    # cola_cube = ft.Container(
    #     content=ft.Image(src=food_data.cola_img), width=250, height=250, bgcolor="transparent", border_radius=10,offset=(3, 0),
    #     animate_opacity=ft.animation.Animation(300),
    # )
    #
    #
    # a = ft.Container(
    #     content=ft.Text(" EVERY", color="white", italic=True, size=30, weight=ft.FontWeight.BOLD), width=100, height=45, bgcolor="blue", border_radius=10, offset=ft.transform.Offset(-11, 0), animate_offset=ft.animation.Animation(700),
    # )
    # b = ft.Container(
    #     content=ft.Text("THING", color="white", italic=True, size=30, weight=ft.FontWeight.BOLD), width=100, height=45,
    #     bgcolor="red", border_radius=10, offset=ft.transform.Offset(11, -1.22),
    #     animate_offset=ft.animation.Animation(700),
    # )
    # c = ft.Container(
    #     content=ft.Text("     for you", color="white", italic=True, size=35), width=200, height=55, bgcolor="green", border_radius=10, offset=ft.transform.Offset(11, -1.22), animate_offset=ft.animation.Animation(700),
    # )
    # d = ft.Container(gradient=ft.LinearGradient(
    #     begin=ft.alignment.center_left,
    #     end=ft.alignment.center_right,
    #    colors=[ft.colors.BLUE, ft.colors.PINK],
    # ),
    #     content=ft.Text(" God of pizza", color="white", italic=True, size=50, weight=ft.FontWeight.BOLD), width=300, height=80, bgcolor="yellow", border_radius=10, animate_opacity=300,
    # )
    # d.opacity = 0
    #
    # def animate_0(e):
    #     must_cube.opacity = 1 if must_cube.opacity == 0 else 0
    #     must_cube.update()
    #     time.sleep(1)
    #     phil_cube.opacity = 1 if phil_cube.opacity == 0 else 0
    #     phil_cube.update()
    #     time.sleep(1)
    #     cali_cube.opacity = 1 if cali_cube.opacity == 0 else 0
    #     cali_cube.update()
    #     time.sleep(1)
    #     cola_cube.opacity = 1 if cola_cube.opacity == 0 else 0
    #     cola_cube.update()
    #
    # def animate(e):
    #     a.offset = ft.transform.Offset(-0.5, 0)
    #     a.update()
    #     b.offset = ft.transform.Offset(0.5, -1.22)
    #     b.update()
    #     c.offset = ft.transform.Offset(0, -1.16)
    #     c.update()
    #     d.opacity = 1 if d.opacity == 0 else 0
    #     d.update()
    #
    # page.add(
    #     must_cube,
    # )
    # time.sleep(1)
    # page.add(
    #     phil_cube,
    # )
    # time.sleep(1)
    # page.add(
    #     cali_cube,
    # )
    # time.sleep(1)
    # page.add(
    #     cola_cube,
    # )
    #
    # page.add(
    #     a,
    #     b,
    #     c,
    #     d,
    # )
    # if __name__ == "__main__":
    #     time.sleep(1)
    #     animate_0(e=page)
    #     time.sleep(3)
    #     animate(e=page)
    def reg(e):
        save_acc.dataclass[nick_name.value] = password.value
        save_acc.save_data()
        greetings.controls.append(ft.Text(f"You are registered as {nick_name.value}!"))
        nick_name.value = ""
        password.value = ""
        page.update()
        nick_name.focus()

    def sign_in(e):
        if nick_name.value in save_acc.dataclass and save_acc.dataclass[nick_name.value] == password.value:
            profile(e)
            nick_info.value = str(nick_name.value)
            password_info.value = str(password.value)
        elif nick_name.value == "admin" and password.value == "admin_panel_run":
            admin(e)
        else:
            greetings.controls.append(ft.Text("Incorrect nickname or password!"))
            nick_name.value = ""
            password.value = ""
            nick_name.focus()
        page.update()

    def reg_menu(e):
        global sign_status
        sign_status = False
        page.controls.clear()
        page.add(
            nick_name,
            password,
            ft.ElevatedButton("Register?", on_click=reg),
            ft.ElevatedButton("Sign in?", on_click=sign_in),
            greetings,
        )
        nick_name.value = ""
        password.value = ""
        greetings.controls.clear()
        nick_name.focus()
        page.update()

    def sign_out(e):
        reg_menu(e)

    def food_menu(e):
        page.controls.clear()
        page.add(
            ft.ElevatedButton("Pizza", on_click=lambda e: spec_food(pizza_list)),
            ft.ElevatedButton("Sushi", on_click=lambda e: spec_food(sushi_list)),
            ft.ElevatedButton("Drinks", on_click=lambda e: spec_food(drinks_list)),
        )
        page.update()

    def spec_food(food_list):
        page.controls.clear()
        for food in food_list:
            page.add(food)
        page.update()

    food_price = ft.TextField("0", read_only=True)

    def plus_food(food_dict):
        global food_box
        food_box.append(food_dict.get("Название"))
        food_price.value = str(int(food_price.value) + int(food_dict.get("Цена")))


    def minus_food(food_dict):
        if int(food_price.value) > 0:
            if food_dict.get("Название") in food_box:
                food_price.value = str(int(food_price.value) - int(food_dict.get("Цена")))
                food_box.remove(food_dict.get("Название"))
            else:
                page.add(ft.Text("Вы не можете удалить это из корзины так как вы не добавляли это в корзину"))

    def clear_cart(e):
        page.controls.clear()
        page.add(ft.Text("Списано " + food_price.value + " руб"))
        food_box.clear()
        if save_price.dataprice.get(str(datetime.date.today())) != 0:
            save_price.dataprice[str(datetime.date.today())] = int(save_price.dataprice.get(str(datetime.date.today()))) + int(food_price.value)
            save_price.save_data()
        else:
            save_price.dataprice[str(datetime.date.today())] = int(food_price.value)
            save_price.save_data()
        food_price.value = "0"
        page.update()

    def find_dictionary(dictionaries, key, value):
        for dictionary in dictionaries:
            if key in dictionary and dictionary[key] == value:
                return dictionary
        return None


    def b(food_dict):
        fb = int(len(food_box))
        for i in range(fb):
            page.add(ft.Container(
                ft.Row([
                    ft.IconButton(icon=ft.icons.REMOVE, on_click=lambda e: minus_food(food_dict=find_dictionary(food_data.dicts, "Название", food_dict.get("Название")))),
                    ft.TextField(str(food_box[i]), read_only=True)
                ])
            ))
        page.update()

    def food_cart(food_dict):
        page.controls.clear()
        if int(food_price.value) == 0:
            page.add(
                ft.Text("Корзина пуста")
            )
            page.update()
        else:
            page.add(
                food_price,
                ft.ElevatedButton("Оформить заказ", on_click=lambda e: clear_cart(e=page))
            )
            b(food_dict=food_dict)
            page.update()


    def food_description(food_dict):
        page.clean()
        img = ft.Image(src=str(food_dict.get("Фото")), width=500, height=500, fit=ft.ImageFit.CONTAIN)
        page.add(ft.Container(ft.Row([
            img,
            ft.Text("Название"), ft.Text(food_dict.get("Название")),
            ft.Text("Состав"), ft.Text(food_dict.get("Состав")),
            ft.Text("Цена"), ft.Text(food_dict.get("Цена")),
            ft.IconButton(icon=ft.icons.ADD, on_click= lambda e: plus_food(food_dict))
        ])))
        if food_dict.get("Название") in food_box:
            page.add(ft.IconButton(icon=ft.icons.REMOVE, on_click= lambda e: minus_food(food_dict)))

    pizza_list = [ft.ElevatedButton("Маргарита", on_click=lambda e: food_description(food_data.marg_dict)), ft.ElevatedButton("Горчичная", on_click=lambda e: food_description(food_data.must_dict)), ft.ElevatedButton("Классическая", on_click=lambda e: food_description(food_data.clas_dict))]
    sushi_list = [ft.ElevatedButton("Филадельфия", on_click=lambda e: food_description(food_data.phil_dict)), ft.ElevatedButton("Калифорния", on_click=lambda e: food_description(food_data.cali_dict)), ft.ElevatedButton("Лава", on_click=lambda e: food_description(food_data.lava_dict))]
    drinks_list = [ft.ElevatedButton("Кола", on_click=lambda e: food_description(food_data.cola_dict)), ft.ElevatedButton("Чай", on_click=lambda e: food_description(food_data.tea_dict)), ft.ElevatedButton("Вода", on_click=lambda e: food_description(food_data.water_dict))]

    def get_current_food_dict(index):
        return food_data.dicts[index]

    try:
        page.add(ft.Image(save_img.food_data["Фото"]))
    except KeyError:
        page.add(ft.Text(""))

    for data in save_text.textdata:
        page.add(ft.Text(f"{data}: {save_text.textdata[data]}"))
    page.update()

    def admin(e):
        page.controls.clear()
        name_food = ft.TextField(label="Введите название новой еды")
        description_food = ft.TextField(label="Введите описание новой еды")
        img_adress = ft.TextField(label="Вставьте путь до фотографии для новой еды")
        price_food = ft.TextField(label="Введите цену")
        type_food = ft.TextField(label="Введите тип еды (Пицца, Суши, Напиток)")
        def new_food(e):
            new_dict = {"Фото": img_adress.value, "Название": name_food.value, "Состав": description_food.value, "Цена": price_food.value}
            if type_food.value == "Пицца":
                pizza_list.append(ft.ElevatedButton(str(name_food.value), on_click=lambda e: food_description(new_dict)))
            elif type_food.value == "Суши":
                sushi_list.append(ft.ElevatedButton(str(name_food.value), on_click=lambda e: food_description(new_dict)))
            elif type_food.value == "Напиток":
                drinks_list.append(ft.ElevatedButton(str(name_food.value), on_click=lambda e: food_description(new_dict)))
            save_img.food_data = {
                "Фото": img_adress.value
            }
            save_img.save_data()
            save_text.textdata = {
                "name_food": name_food.value,
                "description_food": description_food.value,
                "price_food": price_food.value
            }
            save_text.save_data()

            def append_data(self, key, value):
                self.dictdata.append({key: value})
                self.save_data()

            save_dict.save_data()
        page.add(name_food, description_food, price_food, img_adress, type_food)

        page.add(
            ft.ElevatedButton("Добавить еду", on_click=new_food(e)),
            ft.ElevatedButton("Изменить еду")
        )
        page.update()

    def buys(e):
        page.controls.clear()
        fig = Figure()
        ax = fig.add_subplot(111)
        x = list(save_price.dataprice.keys())
        y = list(save_price.dataprice.values())
        plt.plot(x, y)
        plt.xlabel("Дни")
        plt.ylabel("Руб")
        plt.title("Ваши покупки")
        ax.plot(x, y)
        fig.tight_layout()
        canvas = FigureCanvas(fig)
        buf = io.BytesIO()
        canvas.print_png(buf)
        data = base64.b64encode(buf.getvalue()).decode('utf-8')
        plot_image = ft.Image(src_base64=data, width=400)
        page.controls.append(plot_image)
        page.update()

    def profile(e):
        global sign_status
        sign_status = True
        page.controls.clear()
        page.add(
            nick_info,
            password_info,
            ft.ElevatedButton("Sign out?", on_click=sign_out),
            greetings,
        )



        def on_destination_click(e):
            index = page.navigation_bar.selected_index
            if index == 0:
                profile(e)
                page.update()
            elif index == 1:
                page.controls.clear()
                food_menu(e)
                page.update()
            elif index == 2:
                food_cart(get_current_food_dict(index))
                page.update()
            elif index == 3:
                buys(e)


            greetings.controls.clear()
            page.update()
        page.navigation_bar = ft.NavigationBar(
            on_change=on_destination_click,
            destinations=[
                ft.NavigationDestination(icon=ft.icons.ACCOUNT_CIRCLE, label="Аккаунт"),
                ft.NavigationDestination(icon=ft.icons.FLATWARE, label="Заказать еду"),
                ft.NavigationDestination(icon=ft.icons.SHOPPING_CART_OUTLINED, label="Корзина"),
                ft.NavigationDestination(icon=ft.icons.SHOPPING_CART, label="Ваши покупки"),
            ]
        )
        greetings.controls.append(ft.Text(f"You are signed in as {nick_name.value}!"))
        page.update()

    page.add(
        nick_name,
        password,
        ft.ElevatedButton("Register?", on_click=reg),
        ft.ElevatedButton("Sign in?", on_click=sign_in),
        greetings,
    )
ft.app(target=main)
